{"version":3,"sources":["src/bird.ts","src/vector.ts","src/boid.ts","src/canvas.ts","src/ui.ts","src/obstacle.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.848b1f19.js","sourceRoot":"..","sourcesContent":["import { Boid } from \"./boid\";\r\n\r\nexport class Bird {\r\n    private boid: Boid;\r\n    private wingSpan: number;\r\n    private greenValue = 255;\r\n\r\n    constructor(boid: Boid, wingSpan = 10) {\r\n        this.boid = boid;\r\n        this.wingSpan = wingSpan;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, frame: number): void {\r\n        const angle = Math.atan2(this.boid.velocity.y, this.boid.velocity.x);\r\n        const { x, y } = this.boid.position;\r\n        const size = this.wingSpan + (Math.sin(frame / 10) * this.wingSpan) / 4;\r\n\r\n        ctx.save();\r\n\r\n        ctx.translate(x, y);\r\n        ctx.rotate(angle);\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(size, 0);\r\n        ctx.lineTo(-size / 2, size / 2);\r\n        ctx.lineTo(-size / 2, -size / 2);\r\n        ctx.closePath();\r\n\r\n        const color = `rgb(0, ${this.greenValue}, 0)`;\r\n        ctx.fillStyle = color;\r\n        this.greenValue = Math.max(this.greenValue - 2, 0);\r\n        ctx.fill();\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    printBoidForces(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n\r\n        ctx.font = \"10px Arial\";\r\n\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillText(\r\n            `${this.boid.alignmentForce.x.toFixed(2)}, ${this.boid.alignmentForce.y.toFixed(2)}`,\r\n            this.boid.position.x + 10,\r\n            this.boid.position.y - 10\r\n        );\r\n\r\n        ctx.fillStyle = \"red\";\r\n        ctx.fillText(\r\n            `${this.boid.cohesionForce.x.toFixed(2)}, ${this.boid.cohesionForce.y.toFixed(2)}`,\r\n            this.boid.position.x + 10,\r\n            this.boid.position.y\r\n        );\r\n\r\n        ctx.fillStyle = \"blue\";\r\n        ctx.fillText(\r\n            `${this.boid.separationForce.x.toFixed(2)}, ${this.boid.separationForce.y.toFixed(2)}`,\r\n            this.boid.position.x + 10,\r\n            this.boid.position.y + 10\r\n        );\r\n\r\n        ctx.restore();\r\n    }\r\n}\r\n","export class Vector {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(v: Vector): Vector {\r\n        return new Vector(this.x + v.x, this.y + v.y);\r\n    }\r\n\r\n    sub(v: Vector): Vector {\r\n        return new Vector(this.x - v.x, this.y - v.y);\r\n    }\r\n\r\n    mult(n: number): Vector {\r\n        return new Vector(this.x * n, this.y * n);\r\n    }\r\n\r\n    div(n: number): Vector {\r\n        return new Vector(this.x / n, this.y / n);\r\n    }\r\n\r\n    normalize(): Vector {\r\n        const mag = this.mag();\r\n        if (mag !== 0) {\r\n            return this.div(mag);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    limit(max: number): Vector {\r\n        if (this.mag() > max) {\r\n            return this.normalize().mult(max);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    mag(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    static dist(v1: Vector, v2: Vector): number {\r\n        return v1.sub(v2).mag();\r\n    }\r\n}\r\n","import { Obstacle } from \"./obstacle\";\r\nimport { Vector } from \"./vector\";\r\n\r\nexport class Boid {\r\n    public alignmentForce = new Vector(0, 0);\r\n    public cohesionForce = new Vector(0, 0);\r\n    public separationForce = new Vector(0, 0);\r\n\r\n    private acceleration = new Vector(0, 0);\r\n    private seekForceMultiplier = 1.5;\r\n\r\n    private edgeAvoidanceDistance = 20;\r\n    private edgeAvoidanceStrength = 1;\r\n\r\n    private obstacleAvoidanceDistance = 20;\r\n    private obstacleAvoidanceStrength = 0.5;\r\n\r\n    constructor(\r\n        public position: Vector,\r\n        public velocity: Vector,\r\n        private maxSpeed: number,\r\n        private maxForce: number\r\n    ) {}\r\n\r\n    update(\r\n        boids: Boid[],\r\n        cursorPosition: Vector | null,\r\n        obstacles: Obstacle[],\r\n        screenWidth: number,\r\n        screenHeight: number\r\n    ): void {\r\n        this.applyFlockingBehaviors(boids);\r\n\r\n        if (cursorPosition) this.applyCursorForce(cursorPosition);\r\n        this.applyEdgeAvoidanceForce(screenWidth, screenHeight);\r\n        this.applyObstacleAvoidanceForce(obstacles);\r\n\r\n        this.updateVelocity();\r\n        this.updatePosition();\r\n        this.resetAcceleration();\r\n    }\r\n\r\n    isOutside(width: number, height: number): boolean {\r\n        return (\r\n            this.position.x < 0 ||\r\n            this.position.y < 0 ||\r\n            this.position.x > width ||\r\n            this.position.y > height\r\n        );\r\n    }\r\n\r\n    private seek(target: Vector): Vector {\r\n        const desired = target.sub(this.position).normalize().mult(this.maxSpeed);\r\n        const steer = desired.sub(this.velocity).limit(this.maxForce);\r\n        return steer;\r\n    }\r\n\r\n    private applyFlockingBehaviors(boids: Boid[]): void {\r\n        this.alignmentForce = this.calculateAlignmentForce(boids, 50);\r\n        this.cohesionForce = this.calculateCohesionForce(boids, 50);\r\n        this.separationForce = this.calculateSeparationForce(boids, 50);\r\n\r\n        this.applySteerForce(this.separationForce);\r\n        this.applySteerForce(this.alignmentForce);\r\n        this.applySteerForce(this.cohesionForce);\r\n    }\r\n\r\n    private applyCursorForce(cursorPosition: Vector): void {\r\n        const cursorForce = this.seek(cursorPosition).mult(this.seekForceMultiplier);\r\n        this.applyForce(cursorForce);\r\n    }\r\n\r\n    private applyEdgeAvoidanceForce(screenWidth: number, screenHeight: number): void {\r\n        const edgeAvoidanceForce = this.calculateEdgeAvoidanceForce(screenWidth, screenHeight);\r\n        this.applyForce(edgeAvoidanceForce);\r\n    }\r\n\r\n    private applyObstacleAvoidanceForce(obstacles: Obstacle[]): void {\r\n        const obstacleAvoidanceForce = this.calculateObstacleAvoidanceForce(obstacles);\r\n        this.applyForce(obstacleAvoidanceForce);\r\n    }\r\n\r\n    private getBoidsInRange(boids: Boid[], range: number): Boid[] {\r\n        return boids.filter(\r\n            (boid) =>\r\n                Vector.dist(this.position, boid.position) > 0 &&\r\n                Vector.dist(this.position, boid.position) < range\r\n        );\r\n    }\r\n\r\n    private calculateSeparationForce(boids: Boid[], range: number): Vector {\r\n        const diffVectors = this.getBoidsInRange(boids, range).map((boid) =>\r\n            this.position\r\n                .sub(boid.position)\r\n                .normalize()\r\n                .div(Vector.dist(this.position, boid.position))\r\n        );\r\n\r\n        return this.getAverageVector(diffVectors);\r\n    }\r\n\r\n    private calculateAlignmentForce(boids: Boid[], range: number): Vector {\r\n        const velocityVectors = this.getBoidsInRange(boids, range).map((boid) => boid.velocity);\r\n\r\n        return this.getAverageVector(velocityVectors);\r\n    }\r\n\r\n    private calculateCohesionForce(boids: Boid[], range: number): Vector {\r\n        const positionVectors = this.getBoidsInRange(boids, range).map((boid) => boid.position);\r\n\r\n        return this.getAverageVector(positionVectors);\r\n    }\r\n\r\n    private calculateEdgeAvoidanceForce(screenWidth: number, screenHeight: number): Vector {\r\n        let avoidanceForce = new Vector(0, 0);\r\n\r\n        const leftEdgeDistance = this.position.x;\r\n        const rightEdgeDistance = screenWidth - this.position.x;\r\n        const topEdgeDistance = this.position.y;\r\n        const bottomEdgeDistance = screenHeight - this.position.y;\r\n\r\n        if (leftEdgeDistance < this.edgeAvoidanceDistance) {\r\n            avoidanceForce.x =\r\n                ((this.edgeAvoidanceDistance - leftEdgeDistance) / this.edgeAvoidanceDistance) *\r\n                this.edgeAvoidanceStrength;\r\n        } else if (rightEdgeDistance < this.edgeAvoidanceDistance) {\r\n            avoidanceForce.x = -(\r\n                ((this.edgeAvoidanceDistance - rightEdgeDistance) / this.edgeAvoidanceDistance) *\r\n                this.edgeAvoidanceStrength\r\n            );\r\n        }\r\n\r\n        if (topEdgeDistance < this.edgeAvoidanceDistance) {\r\n            avoidanceForce.y =\r\n                ((this.edgeAvoidanceDistance - topEdgeDistance) / this.edgeAvoidanceDistance) *\r\n                this.edgeAvoidanceStrength;\r\n        } else if (bottomEdgeDistance < this.edgeAvoidanceDistance) {\r\n            avoidanceForce.y = -(\r\n                ((this.edgeAvoidanceDistance - bottomEdgeDistance) / this.edgeAvoidanceDistance) *\r\n                this.edgeAvoidanceStrength\r\n            );\r\n        }\r\n\r\n        return avoidanceForce;\r\n    }\r\n\r\n    private calculateObstacleAvoidanceForce(obstacles: Obstacle[]): Vector {\r\n        let avoidanceForce = new Vector(0, 0);\r\n\r\n        for (const obstacle of obstacles) {\r\n            const directionToObstacle = this.position.sub(obstacle.center);\r\n            const distanceToObstacle = directionToObstacle.mag();\r\n\r\n            if (distanceToObstacle < this.obstacleAvoidanceDistance + obstacle.radius) {\r\n                const avoidanceStrength =\r\n                    ((this.obstacleAvoidanceDistance + obstacle.radius - distanceToObstacle) /\r\n                        this.obstacleAvoidanceDistance) *\r\n                    this.obstacleAvoidanceStrength;\r\n                avoidanceForce = avoidanceForce.add(\r\n                    directionToObstacle.normalize().mult(avoidanceStrength)\r\n                );\r\n            }\r\n        }\r\n\r\n        return avoidanceForce;\r\n    }\r\n\r\n    private getAverageVector(vectors: Vector[]): Vector {\r\n        const sum = vectors.reduce((sum, vector) => sum.add(vector), new Vector(0, 0));\r\n        const count = vectors.length;\r\n        return count > 0 ? sum.div(count) : new Vector(0, 0);\r\n    }\r\n\r\n    private applyForce(force: Vector): void {\r\n        this.acceleration = this.acceleration.add(force);\r\n    }\r\n\r\n    private applySteerForce(force: Vector): void {\r\n        if (force.mag() > 0) {\r\n            const steerForce = force\r\n                .normalize()\r\n                .mult(this.maxSpeed)\r\n                .sub(this.velocity)\r\n                .limit(this.maxForce);\r\n            this.applyForce(steerForce);\r\n        }\r\n    }\r\n\r\n    private updateVelocity(): void {\r\n        this.velocity = this.velocity.add(this.acceleration).limit(this.maxSpeed);\r\n    }\r\n\r\n    private updatePosition(): void {\r\n        this.position = this.position.add(this.velocity);\r\n    }\r\n\r\n    private resetAcceleration(): void {\r\n        this.acceleration = new Vector(0, 0);\r\n    }\r\n}\r\n","export class Canvas {\r\n    public readonly element: HTMLCanvasElement;\r\n    public readonly context: CanvasRenderingContext2D;\r\n\r\n    constructor(elementId: string) {\r\n        this.element = document.getElementById(elementId) as HTMLCanvasElement;\r\n        this.context = this.element?.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        if (!this.context) {\r\n            throw new Error(\"Could not get canvas context\");\r\n        }\r\n\r\n        this.updateSize();\r\n        window.addEventListener(\"resize\", () => this.updateSize());\r\n    }\r\n\r\n    get width(): number {\r\n        return this.element.width;\r\n    }\r\n\r\n    get height(): number {\r\n        return this.element.height;\r\n    }\r\n\r\n    private updateSize(): void {\r\n        this.element.width = window.innerWidth;\r\n        this.element.height = window.innerHeight;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\r\n    }\r\n}\r\n","import { Vector } from \"./vector\";\r\n\r\n// cursor position\r\n\r\nlet cursorPosition: Vector = new Vector(0, 0);\r\nlet cursorIsDown = false;\r\n\r\nfunction updateCursorPosition(event: MouseEvent | TouchEvent) {\r\n    if (event instanceof TouchEvent) {\r\n        cursorPosition = new Vector(event.touches[0].clientX, event.touches[0].clientY);\r\n    } else if (event instanceof MouseEvent) {\r\n        cursorPosition = new Vector(event.clientX, event.clientY);\r\n    }\r\n}\r\n\r\nfunction onCursorUp() {\r\n    cursorIsDown = false;\r\n}\r\n\r\nfunction onCursorDown() {\r\n    cursorIsDown = true;\r\n}\r\n\r\nwindow.addEventListener(\"mousemove\", updateCursorPosition);\r\nwindow.addEventListener(\"touchmove\", updateCursorPosition);\r\n\r\nwindow.addEventListener(\"mousedown\", onCursorDown);\r\nwindow.addEventListener(\"touchstart\", onCursorDown);\r\n\r\nwindow.addEventListener(\"mouseup\", onCursorUp);\r\nwindow.addEventListener(\"touchend\", onCursorUp);\r\n\r\nexport function getCursorPosition(): Vector | null {\r\n    return cursorIsDown ? cursorPosition : null;\r\n}\r\n\r\n// bird count input\r\n\r\nlet birdCountInput = document.getElementById(\"birdCount\") as HTMLInputElement;\r\n\r\nexport function onBirdCountChange(callback: (birdCount: number) => void): void {\r\n    birdCountInput.addEventListener(\"change\", () => {\r\n        callback(parseInt(birdCountInput.value));\r\n    });\r\n}\r\n","import { Vector } from \"./vector\";\r\n\r\nexport class Obstacle {\r\n    center: Vector;\r\n    radius: number;\r\n\r\n    constructor(center: Vector, radius: number) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.center.x, this.center.y, this.radius, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n\r\n        ctx.fillStyle = \"red\";\r\n        ctx.fill();\r\n\r\n        ctx.restore();\r\n    }\r\n}\r\n","import \"./styles.css\";\r\nimport { Bird } from \"./bird\";\r\nimport { Boid } from \"./boid\";\r\nimport { Vector } from \"./vector\";\r\nimport { Canvas } from \"./canvas\";\r\nimport { getCursorPosition, onBirdCountChange } from \"./ui\";\r\nimport { Obstacle } from \"./obstacle\";\r\n\r\nconst canvas = new Canvas(\"canvas\");\r\n\r\nfunction generateRandomBoid(): Boid {\r\n    const MAX_SPEED = 2;\r\n    const MAX_FORCE = 0.05;\r\n    const position = new Vector(Math.random() * canvas.width, Math.random() * canvas.height);\r\n    const velocity = new Vector(Math.random() - 0.5, Math.random() - 0.5);\r\n\r\n    return new Boid(position, velocity, MAX_SPEED, MAX_FORCE);\r\n}\r\n\r\nfunction generateBirds(amount: number): void {\r\n    boids = Array.from({ length: amount }, generateRandomBoid);\r\n    birds = boids.map((boid) => new Bird(boid));\r\n}\r\n\r\nlet boids: Boid[];\r\nlet birds: Bird[];\r\nlet obstacles: Obstacle[];\r\n\r\nfunction generateRandomObstacle(): Obstacle {\r\n    const radius = Math.random() * 50;\r\n    const position = new Vector(Math.random() * canvas.width, Math.random() * canvas.height);\r\n\r\n    return new Obstacle(position, radius);\r\n}\r\n\r\nfunction generateObstacles(amount: number): void {\r\n    obstacles = Array.from({ length: amount }, generateRandomObstacle);\r\n}\r\n\r\nfunction runSimulation(frameCount = 0) {\r\n    canvas.clear();\r\n    boids.forEach((boid, i) => {\r\n        boid.update(boids, getCursorPosition(), obstacles, canvas.width, canvas.height);\r\n        if (boid.isOutside(canvas.width, canvas.height)) {\r\n            boids[i] = generateRandomBoid();\r\n            birds[i] = new Bird(boids[i]);\r\n        }\r\n        birds[i].draw(canvas.context, frameCount);\r\n    });\r\n\r\n    obstacles.forEach((obstacle) => {\r\n        obstacle.draw(canvas.context);\r\n    });\r\n\r\n    drawCursor();\r\n\r\n    requestAnimationFrame(() => runSimulation(frameCount + 1));\r\n}\r\n\r\nfunction drawCursor() {\r\n    const cursorPosition = getCursorPosition();\r\n    if (cursorPosition) {\r\n        const size = 10;\r\n\r\n        canvas.context.strokeStyle = \"blue\";\r\n        canvas.context.beginPath();\r\n        canvas.context.moveTo(cursorPosition.x - size, cursorPosition.y - size);\r\n        canvas.context.lineTo(cursorPosition.x + size, cursorPosition.y + size);\r\n        canvas.context.moveTo(cursorPosition.x + size, cursorPosition.y - size);\r\n        canvas.context.lineTo(cursorPosition.x - size, cursorPosition.y + size);\r\n        canvas.context.stroke();\r\n    }\r\n}\r\n\r\nonBirdCountChange((birdCount) => {\r\n    generateBirds(birdCount);\r\n});\r\ngenerateObstacles(10);\r\ngenerateBirds(300);\r\nrunSimulation();\r\n"]}