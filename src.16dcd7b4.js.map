{"version":3,"sources":["src/bird.ts","src/vector.ts","src/boid.ts","src/canvas.ts","src/ui.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.16dcd7b4.js","sourceRoot":"..","sourcesContent":["import { Boid } from \"./boid\";\r\n\r\nexport class Bird {\r\n    private boid: Boid;\r\n    private wingSpan: number;\r\n    private greenValue = 255;\r\n\r\n    constructor(boid: Boid, wingSpan = 10) {\r\n        this.boid = boid;\r\n        this.wingSpan = wingSpan;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, frame: number): void {\r\n        const angle = Math.atan2(this.boid.velocity.y, this.boid.velocity.x);\r\n        const { x, y } = this.boid.position;\r\n        const size = this.wingSpan + (Math.sin(frame / 10) * this.wingSpan) / 4;\r\n\r\n        ctx.save();\r\n\r\n        ctx.translate(x, y);\r\n        ctx.rotate(angle);\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(size, 0);\r\n        ctx.lineTo(-size / 2, size / 2);\r\n        ctx.lineTo(-size / 2, -size / 2);\r\n        ctx.closePath();\r\n\r\n        const color = `rgb(0, ${this.greenValue}, 0)`;\r\n        ctx.fillStyle = color;\r\n        this.greenValue = Math.max(this.greenValue - 2, 0);\r\n        ctx.fill();\r\n\r\n        ctx.restore();\r\n    }\r\n}\r\n","export class Vector {\r\n    readonly x: number;\r\n    readonly y: number;\r\n\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(v: Vector): Vector {\r\n        return new Vector(this.x + v.x, this.y + v.y);\r\n    }\r\n\r\n    sub(v: Vector): Vector {\r\n        return new Vector(this.x - v.x, this.y - v.y);\r\n    }\r\n\r\n    mult(n: number): Vector {\r\n        return new Vector(this.x * n, this.y * n);\r\n    }\r\n\r\n    div(n: number): Vector {\r\n        return new Vector(this.x / n, this.y / n);\r\n    }\r\n\r\n    normalize(): Vector {\r\n        const mag = this.mag();\r\n        if (mag !== 0) {\r\n            return this.div(mag);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    limit(max: number): Vector {\r\n        if (this.mag() > max) {\r\n            return this.normalize().mult(max);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    mag(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    static dist(v1: Vector, v2: Vector): number {\r\n        return v1.sub(v2).mag();\r\n    }\r\n}\r\n","import { Vector } from \"./vector\";\r\n\r\nexport class Boid {\r\n    position: Vector;\r\n    velocity: Vector;\r\n    private acceleration: Vector;\r\n    private maxSpeed: number;\r\n    private maxForce: number;\r\n    private seekForceMultiplier = 1.5;\r\n\r\n    constructor(position: Vector, velocity: Vector, maxSpeed: number, maxForce: number) {\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n        this.acceleration = new Vector(0, 0);\r\n        this.maxSpeed = maxSpeed;\r\n        this.maxForce = maxForce;\r\n    }\r\n\r\n    update(boids: Boid[], cursorPosition: Vector): void {\r\n        this.applyBehaviors(boids);\r\n\r\n        const cursorForce = this.seek(cursorPosition).mult(this.seekForceMultiplier);\r\n        this.applyForce(cursorForce);\r\n\r\n        this.updateVelocity();\r\n        this.updatePosition();\r\n        this.resetAcceleration();\r\n    }\r\n\r\n    isOutside(width: number, height: number): boolean {\r\n        return (\r\n            this.position.x < 0 ||\r\n            this.position.y < 0 ||\r\n            this.position.x > width ||\r\n            this.position.y > height\r\n        );\r\n    }\r\n\r\n    private seek(target: Vector): Vector {\r\n        const desired = target.sub(this.position).normalize().mult(this.maxSpeed);\r\n        const steer = desired.sub(this.velocity).limit(this.maxForce);\r\n        return steer;\r\n    }\r\n\r\n    private applyBehaviors(boids: Boid[]): void {\r\n        const separate = this.separate(boids, 50);\r\n        const align = this.align(boids, 50);\r\n        const cohesion = this.cohesion(boids, 50);\r\n\r\n        this.applySteerForce(separate);\r\n        this.applySteerForce(align);\r\n        this.applySteerForce(cohesion);\r\n    }\r\n\r\n    private separate(boids: Boid[], range: number): Vector {\r\n        const diffVectors = boids\r\n            .filter(\r\n                (boid) =>\r\n                    Vector.dist(this.position, boid.position) > 0 &&\r\n                    Vector.dist(this.position, boid.position) < range\r\n            )\r\n            .map((boid) =>\r\n                this.position\r\n                    .sub(boid.position)\r\n                    .normalize()\r\n                    .div(Vector.dist(this.position, boid.position))\r\n            );\r\n\r\n        return this.getAverageVector(diffVectors);\r\n    }\r\n\r\n    private align(boids: Boid[], range: number): Vector {\r\n        const velocityVectors = boids\r\n            .filter(\r\n                (boid) =>\r\n                    Vector.dist(this.position, boid.position) > 0 &&\r\n                    Vector.dist(this.position, boid.position) < range\r\n            )\r\n            .map((boid) => boid.velocity);\r\n\r\n        return this.getAverageVector(velocityVectors);\r\n    }\r\n\r\n    private cohesion(boids: Boid[], range: number): Vector {\r\n        const positionVectors = boids\r\n            .filter(\r\n                (boid) =>\r\n                    Vector.dist(this.position, boid.position) > 0 &&\r\n                    Vector.dist(this.position, boid.position) < range\r\n            )\r\n            .map((boid) => boid.position);\r\n\r\n        return this.getAverageVector(positionVectors);\r\n    }\r\n\r\n    private getAverageVector(vectors: Vector[]): Vector {\r\n        const sum = vectors.reduce((sum, vector) => sum.add(vector), new Vector(0, 0));\r\n        const count = vectors.length;\r\n        return count > 0 ? sum.div(count) : new Vector(0, 0);\r\n    }\r\n\r\n    private applyForce(force: Vector): void {\r\n        this.acceleration = this.acceleration.add(force);\r\n    }\r\n\r\n    private applySteerForce(vector: Vector): void {\r\n        if (vector.mag() > 0) {\r\n            const steer = vector\r\n                .normalize()\r\n                .mult(this.maxSpeed)\r\n                .sub(this.velocity)\r\n                .limit(this.maxForce);\r\n            this.applyForce(steer);\r\n        }\r\n    }\r\n\r\n    private updateVelocity(): void {\r\n        this.velocity = this.velocity.add(this.acceleration).limit(this.maxSpeed);\r\n    }\r\n\r\n    private updatePosition(): void {\r\n        this.position = this.position.add(this.velocity);\r\n    }\r\n\r\n    private resetAcceleration(): void {\r\n        this.acceleration = new Vector(0, 0);\r\n    }\r\n}\r\n","export class Canvas {\r\n    public readonly element: HTMLCanvasElement;\r\n    public readonly context: CanvasRenderingContext2D;\r\n\r\n    constructor(elementId: string) {\r\n        this.element = document.getElementById(elementId) as HTMLCanvasElement;\r\n        this.context = this.element?.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        if (!this.context) {\r\n            throw new Error(\"Could not get canvas context\");\r\n        }\r\n\r\n        this.updateSize();\r\n        window.addEventListener(\"resize\", () => this.updateSize());\r\n    }\r\n\r\n    private updateSize(): void {\r\n        this.element.width = window.innerWidth;\r\n        this.element.height = window.innerHeight;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\r\n    }\r\n}\r\n","import { Vector } from \"./vector\";\r\n\r\n// cursor position\r\n\r\nlet cursorPosition = new Vector(0, 0);\r\n\r\nfunction updateCursorPosition(event: MouseEvent | TouchEvent) {\r\n    if (event instanceof TouchEvent) {\r\n        cursorPosition = new Vector(event.touches[0].clientX, event.touches[0].clientY);\r\n    } else if (event instanceof MouseEvent) {\r\n        cursorPosition = new Vector(event.clientX, event.clientY);\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"mousemove\", updateCursorPosition);\r\nwindow.addEventListener(\"touchmove\", updateCursorPosition);\r\n\r\nexport function getCursorPosition(): Vector {\r\n    return cursorPosition;\r\n}\r\n\r\n// bird count input\r\n\r\nlet birdCountInput = document.getElementById(\"birdCount\") as HTMLInputElement;\r\n\r\nexport function onBirdCountChange(callback: (birdCount: number) => void): void {\r\n    birdCountInput.addEventListener(\"change\", () => {\r\n        callback(parseInt(birdCountInput.value));\r\n    });\r\n}\r\n","import \"./styles.css\";\r\nimport { Bird } from \"./bird\";\r\nimport { Boid } from \"./boid\";\r\nimport { Vector } from \"./vector\";\r\nimport { Canvas } from \"./canvas\";\r\nimport { getCursorPosition, onBirdCountChange } from \"./ui\";\r\n\r\nconst canvas = new Canvas(\"canvas\");\r\n\r\nfunction generateRandomBoid(): Boid {\r\n    const MAX_SPEED = 2;\r\n    const MAX_FORCE = 0.05;\r\n    const position = new Vector(\r\n        Math.random() * canvas.element.width,\r\n        Math.random() * canvas.element.height\r\n    );\r\n    const velocity = new Vector(Math.random() - 0.5, Math.random() - 0.5);\r\n\r\n    return new Boid(position, velocity, MAX_SPEED, MAX_FORCE);\r\n}\r\n\r\nfunction generateBirds(amount: number): void {\r\n    boids = Array.from({ length: amount }, generateRandomBoid);\r\n    birds = boids.map((boid) => new Bird(boid));\r\n}\r\n\r\nlet boids: Boid[];\r\nlet birds: Bird[];\r\n\r\nfunction runSimulation(frameCount = 0) {\r\n    canvas.clear();\r\n    boids.forEach((boid, i) => {\r\n        boid.update(boids, getCursorPosition());\r\n        if (boid.isOutside(canvas.element.width, canvas.element.height)) {\r\n            boids[i] = generateRandomBoid();\r\n            birds[i] = new Bird(boids[i]);\r\n        }\r\n        birds[i].draw(canvas.context, frameCount);\r\n    });\r\n\r\n    requestAnimationFrame(() => runSimulation(frameCount + 1));\r\n}\r\n\r\nonBirdCountChange((birdCount) => {\r\n    generateBirds(birdCount);\r\n});\r\ngenerateBirds(300);\r\nrunSimulation();\r\n"]}